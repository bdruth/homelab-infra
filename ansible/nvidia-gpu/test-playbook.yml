---
# Test playbook for NVIDIA GPU configuration

- name: Import NVIDIA GPU configuration playbook
  import_playbook: main.yml

- name: Validate NVIDIA GPU configuration
  hosts: all
  become: true
  vars_files:
    - vars/main.yml
  tasks:
    - name: Check NVIDIA driver is installed
      ansible.builtin.command: nvidia-smi
      register: nvidia_smi_result
      changed_when: false
      ignore_errors: true
      when: nvidia_install_gpu_drivers is defined and nvidia_install_gpu_drivers | bool

    - name: Display NVIDIA driver status
      ansible.builtin.debug:
        msg: "NVIDIA driver status: {{ 'OK' if nvidia_smi_result.rc is defined and nvidia_smi_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: nvidia_install_gpu_drivers is defined and nvidia_install_gpu_drivers | bool

    - name: Check CUDA toolkit is installed
      ansible.builtin.command: nvcc --version
      register: nvcc_result
      changed_when: false
      ignore_errors: true
      when: nvidia_install_cuda_toolkit is defined and nvidia_install_cuda_toolkit | bool

    - name: Display CUDA toolkit status
      ansible.builtin.debug:
        msg: "CUDA toolkit status: {{ 'OK' if nvcc_result.rc is defined and nvcc_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: nvidia_install_cuda_toolkit is defined and nvidia_install_cuda_toolkit | bool

    - name: Check if docker-compose is installed
      ansible.builtin.command: docker-compose --version
      register: docker_compose_result
      changed_when: false
      ignore_errors: true
      when: install_docker_compose is defined and install_docker_compose | bool

    - name: Display docker-compose status
      ansible.builtin.debug:
        msg: "docker-compose status: {{ 'OK' if docker_compose_result.rc is defined and docker_compose_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: install_docker_compose is defined and install_docker_compose | bool

    - name: Check if btop is installed
      ansible.builtin.command: btop --version
      register: btop_result
      changed_when: false
      ignore_errors: true
      when: install_btop is defined and install_btop | bool

    - name: Display btop status
      ansible.builtin.debug:
        msg: "btop status: {{ 'OK' if btop_result.rc is defined and btop_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: install_btop is defined and install_btop | bool

    - name: Check if Ollama is installed
      ansible.builtin.command: ollama --version
      register: ollama_result
      changed_when: false
      ignore_errors: true
      when: install_ollama is defined and install_ollama | bool

    - name: Display Ollama status
      ansible.builtin.debug:
        msg: "Ollama status: {{ 'OK' if ollama_result.rc is defined and ollama_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: install_ollama is defined and install_ollama | bool

    - name: Check if uv is installed with bash
      ansible.builtin.command: bash -i -c "uv --version"
      register: uv_result
      changed_when: false
      ignore_errors: true
      when: install_uv is defined and install_uv | bool

    - name: Display uv status
      ansible.builtin.debug:
        msg: "uv status: {{ 'OK' if uv_result.rc is defined and uv_result.rc == 0 else 'Not properly installed or not enabled' }}"
      when: install_uv is defined and install_uv | bool

    - name: Check if n8n is running
      ansible.builtin.shell: docker ps | grep n8n
      register: n8n_result
      changed_when: false
      ignore_errors: true
      when: install_n8n is defined and install_n8n | bool

    - name: Display n8n status
      ansible.builtin.debug:
        msg: "n8n status: {{ 'OK' if n8n_result.rc is defined and n8n_result.rc == 0 else 'Not properly installed or not running' }}"
      when: install_n8n is defined and install_n8n | bool

    - name: Check if Whisper ASR is running
      ansible.builtin.shell: docker ps | grep whisper
      register: whisper_asr_result
      changed_when: false
      ignore_errors: true
      when: install_whisper_asr is defined and install_whisper_asr | bool

    - name: Display Whisper ASR status
      ansible.builtin.debug:
        msg: "Whisper ASR status: {{ 'OK' if whisper_asr_result.rc is defined and whisper_asr_result.rc == 0 else 'Not properly installed or not running' }}"
      when: install_whisper_asr is defined and install_whisper_asr | bool

    - name: Wait for Whisper ASR HTTP service to become available
      ansible.builtin.uri:
        url: "http://localhost:{{ whisper_asr_port }}/docs"
        method: GET
        status_code: 200
        timeout: 120
      register: whisper_http_check
      retries: 12
      delay: 5
      until: whisper_http_check.status == 200
      ignore_errors: true
      when:
        - install_whisper_asr is defined and install_whisper_asr | bool
        - whisper_asr_result.rc is defined and whisper_asr_result.rc == 0

    - name: Check if CUDA is available inside Whisper ASR container
      ansible.builtin.shell: >
        docker exec whisper-asr /bin/bash -c "source .venv/bin/activate && python3 -c 'import torch; print(torch.cuda.is_available())'"
      register: whisper_cuda_result
      changed_when: false
      ignore_errors: true
      when:
        - install_whisper_asr is defined and install_whisper_asr | bool
        - nvidia_install_gpu_drivers is defined and nvidia_install_gpu_drivers | bool
        - whisper_asr_result.rc is defined and whisper_asr_result.rc == 0
        - whisper_http_check.status is defined and whisper_http_check.status == 200

    - name: Display Whisper ASR CUDA access status
      ansible.builtin.debug:
        msg: "Whisper ASR CUDA access: {{ 'OK - GPU access confirmed' if whisper_cuda_result.stdout_lines[0] == 'True' else 'Not connected to GPU' }}"
      when:
        - install_whisper_asr is defined and install_whisper_asr | bool
        - nvidia_install_gpu_drivers is defined and nvidia_install_gpu_drivers | bool
        - whisper_asr_result.rc is defined and whisper_asr_result.rc == 0
        - whisper_http_check.status is defined and whisper_http_check.status == 200
