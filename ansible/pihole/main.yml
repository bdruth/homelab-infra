---
- name: Install pihole
  hosts: all
  vars_files:
    - vars/main.yml
  become: yes
  vars:
    setupVars_path: /etc/pihole/setupVars.conf
    web_password: "{{ lookup('env', 'PIHOLE_WEB_PASSWORD_HASH') }}"
    pihole_restore_version: v0.1.0
    aws_config_path: /root/.aws/config
    install_backup_crontab: False

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install APT packages
      apt:
        pkg:
          - curl
          - python3-pip
          - python3-boto3
          - python3-packaging
        state: latest
    
    - name: Make sure destination dir exists
      file:
        path: "{{ setupVars_path | dirname }}"
        state: directory

    - name: Create setupVars.conf
      template:
        src: setupVars.conf.j2
        dest: "{{ setupVars_path }}"
        owner: root
        group: root
        mode: '0644'
    
    # Install/update pihole
    - name: Run pihole install
      shell: set -o pipefail && curl -L https://install.pi-hole.net | bash /dev/stdin --unattended
      args:
        executable: /usr/bin/bash
      register: install

    - debug: var=install.stdout_lines
    - debug: var=install.stderr_lines

    ## Chicken & egg: on initial setup, pihole needs teleporter backup restored to provide these values ...
    ## but to get teleporter backup, needs to lookup local s3 host :/ Hard-coding for now.
    ## 
    # dig @localhost synology.cusack-ruth.name AAAA synology.cusack-ruth.name A | \
    # grep -A 1 'ANSWER SECTION' | grep IN | awk '{print $NF}' | \
    # xargs -I {} echo {} synology.cusack-ruth.name
    ## 
    - name: Get synology DNS records from pihole
      shell: |
        echo "{{ s3_api_host_ip }} {{ s3_api_host_name }}"
      register: s3_api_host_entries
    
    - name: Copy synology hosts entries to /etc/hosts
      blockinfile:
        path: /etc/hosts
        marker: "{mark} s3_api_host"
        block: "{{ s3_api_host_entries.stdout }}"

    - name: Copy teleporter backup to remote
      amazon.aws.s3_object:
        access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
        endpoint_url: "{{ s3_api_endpoint_url }}"
        bucket: "{{ s3_teleporter_bucket_name }}"
        object: "{{ s3_teleporter_object_name }}"
        dest: /root/pi-hole-pihole-teleporter.tar.gz
        mode: get
      register: teleporter_backup
    
    - name: Download pihole_restore
      shell: |
        curl -L -o pihole_restore "https://github.com/chamilad/pihole-restore/releases/download/{{ pihole_restore_version }}/pihole_restore-{{ pihole_restore_version }}-linux-x86_64"
        chmod +x pihole_restore

    - name: Restore pihole
      command: /root/pihole_restore -f /root/pi-hole-pihole-teleporter.tar.gz --filters blacklist,blacklistregex,whitelist,whitelistregex,adlist,auditlog,client,staticdhcp,localdns,localcname -c
      register: restore
      when: teleporter_backup.changed
    - debug: var=restore.stdout_lines
    - debug: var=restore.stderr_lines

    - name: Restart pihole-FTL
      service:
        name: pihole-FTL
        state: restarted
      when: restore.changed

    - name: Run unattended `pihole -r`
      command: /etc/.pihole/automated\ install/basic-install.sh --reconfigure --unattended
      register: reconfigure
      tags:
        - maintenance
    - debug: var=reconfigure.stdout_lines
      tags:
        - maintenance
    - debug: var=reconfigure.stderr_lines
      tags:
        - maintenance

    - name: Ensure pihole-FTL is started
      service:
        name: pihole-FTL
        state: started
      tags:
        - maintenance

    - name: Make sure destination dir exists
      file:
        path: "{{ aws_config_path | dirname }}"
        state: directory

    - name: Download jd json diff tool
      get_url:
        url: "https://github.com/josephburnett/jd/releases/download/v1.8.1/jd-amd64-linux"
        dest: "/usr/bin/jd"
        mode: 0755

    - name: Download awscliv2
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/root/awscliv2.zip"
        mode: 0644
      register: awscliv2

    - name: Install awscli
      shell: |
        unzip awscliv2.zip
        ./aws/install --bin-dir /usr/bin --install-dir /usr/aws-cli --update
        rm -rf aws awscliv2.zip
      when: awscliv2.changed

    - name: Install ~/.aws/config
      template:
        src: aws_config.j2
        dest: "{{ aws_config_path }}"
        owner: root
        group: root
        mode: '0644'

    - name: Install ~/backup.sh
      template:
        src: backup.sh.j2
        dest: "/root/backup.sh"
        owner: root
        group: root
        mode: '0755'

    - name: Install backup crontab
      cron:
        name: "Backup pihole configuration"
        minute: '*/15'
        job: "/root/backup.sh >/tmp/backup.log 2>&1 || curl -s -F \"token={{ pushover_token }}\" -F \"user={{ pushover_userId }}\" -F \"title=pihole-backup-job-failed\" -F \"message=pihole backup job failed\" https://api.pushover.net/1/messages.json"
        state: "{{ 'present' if install_backup_crontab else 'absent' }}"
